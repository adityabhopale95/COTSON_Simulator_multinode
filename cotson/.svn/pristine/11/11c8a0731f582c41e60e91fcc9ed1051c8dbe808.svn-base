// (C) Copyright 2006-2009 Hewlett-Packard Development Company, L.P.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

// $Id$

#define BOOST_TEST_MODULE test_tokens
#include <boost/test/included/unit_test.hpp>

#include <stdint.h>

#include "tokens.h"
#include <typedefs.h>
#include <CMonitor.h>

BOOST_AUTO_TEST_CASE( same_values )
{
	// Basic checks
    BOOST_CHECK_EQUAL(TOKEN_EVENT_SHIFT,TOKEN_ID_EVENT_SHIFT);
    BOOST_CHECK_EQUAL(TOKEN_EVENT_MASK,TOKEN_ID_EVENT_MASK);
    BOOST_CHECK_EQUAL(TOKEN_COUNT_SHIFT,TOKEN_ID_COUNT_SHIFT);
    BOOST_CHECK_EQUAL(TOKEN_COUNT_MASK,TOKEN_ID_COUNT_MASK);
    BOOST_CHECK_EQUAL(TOKEN_OPTION_SHIFT,TOKEN_ID_OPTIONS_SHIFT);
    BOOST_CHECK_EQUAL(TOKEN_OPTION_MASK,TOKEN_ID_OPTIONS_MASK);

    BOOST_CHECK_EQUAL(MEMORY_ISREAD(EVENT_MEMORY_ISREAD),EVENT_MEMORY_ISREAD);
    BOOST_CHECK_EQUAL(MEMORY_ISWRITE(EVENT_MEMORY_ISWRITE),EVENT_MEMORY_ISWRITE);
    BOOST_CHECK_EQUAL(MEMORY_HASPHYS(EVENT_MEMORY_HASLIN),EVENT_MEMORY_HASLIN);

	uint64_t a=0x123456789ABCDEF1;
	BOOST_CHECK_EQUAL(TOKEN_EVENT(a),(a&TOKEN_ID_EVENT_MASK)>>TOKEN_ID_EVENT_SHIFT);
	BOOST_CHECK_EQUAL(TOKEN_COUNT(a),(a&TOKEN_ID_COUNT_MASK)>>TOKEN_ID_COUNT_SHIFT);
	BOOST_CHECK_EQUAL(TOKEN_OPTIONS(a),(a&TOKEN_ID_OPTIONS_MASK)>>TOKEN_ID_OPTIONS_SHIFT);

	BOOST_CHECK_EQUAL(EVENT_PROCESSOR_CODEFETCH,EVENT_INSTRUCTION);
	BOOST_CHECK_EQUAL(EVENT_PROCESSOR_MEMORY,EVENT_MEMORY);
	BOOST_CHECK_EQUAL(EVENT_PROCESSOR_EXCEPTION,EVENT_EXCEPTION);
	BOOST_CHECK_EQUAL(EVENT_PROCESSOR_REGVALUE,EVENT_REGISTER);
	BOOST_CHECK_EQUAL(EVENT_PROCESSOR_HEARTBEAT,EVENT_HEARTBEAT);
	BOOST_CHECK_EQUAL(EVENT_BLOCKDEV_IDENTIFY,EVENT_DISK_ID);
	BOOST_CHECK_EQUAL(EVENT_BLOCKDEV_READWRITE,EVENT_DISK_IO);
	BOOST_CHECK_EQUAL(EVENT_PACKETDEV_READWRITE,EVENT_NIC_IO);
	BOOST_CHECK_EQUAL(EVENT_PROCESSOR_BRANCH,EVENT_BRANCH);

	BOOST_CHECK_EQUAL(INSTRUCTIONS_ON,
		EVENT_CODEFETCH_ENABLE|EVENT_CODEFETCH_TRANSLATION);
	BOOST_CHECK_EQUAL(INSTRUCTIONS_OFF,EVENT_CODEFETCH_TRANSLATION);

	BOOST_CHECK_EQUAL(MEMORY_ON,EVENT_MEMORY_ENABLE);
	BOOST_CHECK_EQUAL(MEMORY_OFF,0);

	BOOST_CHECK_EQUAL(EXCEPTION_ON,EVENT_EXCEPTION_ENABLE);
	BOOST_CHECK_EQUAL(EXCEPTION_OFF,0);

	BOOST_CHECK_EQUAL(HEARTBEAT_ON,EVENT_HEARTBEAT_ENABLE);
	BOOST_CHECK_EQUAL(HEARTBEAT_OFF,0);

	BOOST_CHECK_EQUAL(REGISTER_ON,1);
	BOOST_CHECK_EQUAL(REGISTER_OFF,0);

	BOOST_CHECK_EQUAL(DISK_ID_ON,EVENT_BLOCKDEV_ENABLE);
	BOOST_CHECK_EQUAL(DISK_IO_ON,EVENT_BLOCKDEV_EXTTIMING);

	BOOST_CHECK_EQUAL(NIC_IO_ON,EVENT_PACKETDEV_EXTTIMING);
}
