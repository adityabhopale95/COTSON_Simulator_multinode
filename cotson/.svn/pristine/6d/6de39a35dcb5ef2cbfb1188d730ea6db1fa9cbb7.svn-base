#!/bin/bash
## (C) Copyright 2006-2009 Hewlett-Packard Development Company, L.P.

## Note: this isn't a gnu 'configure' script: it simply checks the
## library dependences, and attempt installing what is missing.
## Requires sudo access to run apt-get.

# Prerequisites:
#
# cotson requires lua, zlib, pqxx and various boost libraries.
#
# We have not tested linux distributions other than Debian or Ubuntu, 
# although it should be possible to find the equivalent packages 
# that install the required libraries
source add-image.sh --lib
SIMNOW_SUPPORTED_VER="4.6.2pub"
#SIMNOW_SUPPORTED_VER="4.6.2pub"

DIST_IMAGE="karmic64"

status_args="$*"
simnow_dir=""
root=`pwd`
data_dir="$root/data"
src_dir="$root/src"
cc="gcc"
cxx="g++"
vnctest=0  # default to 0 since on some Ubuntu machines the vnc test closes the connection !
force=0
llua="lua5.1"

BASEPATH_STATUS_FILE="/var/lib"
DIR_NAME_STATUS_FILE="cotson"
STATUS_FILE_PATH="$BASEPATH_STATUS_FILE/$DIR_NAME_STATUS_FILE"

#shopt -s extglob

if [[ "$SIMNOW_DIR" != "" ]]; then
	simnow_dir=$SIMNOW_DIR
fi
if [[ "$DATA_DIR" != "" ]]; then
	data_dir=$DATA_DIR
fi
if [[ "$CC" != "" ]]; then
	cc="$CC"
fi
if [[ "$CXX" != "" ]]; then
	cxx="$CXX"
fi

function usage ()
{
	echo "Usage: $0"
	echo "--simnow_dir simnow_location            set simnow dir"
	echo "--data_dir data_location                set data dir"
	echo "--cc c-compiler                         set C compiler"
	echo "--cxx c++-compiler                      set C++ compiler"
#	echo "--distro release_name (e.g. karmic)     set Linux Distribution"
	echo "--vnctest N                             test N vnc ports"
	echo "--force                                 ignore simnow version"
	echo "--image                                 select your HDD image"
	exit 1
}

while [ $# -gt 0 ]
do
	case $1 in
		--simnow_dir) simnow_dir=$2; shift; shift;;
		--data_dir) data_dir=$2; shift; shift;;
		--cc) cc=$2; shift; shift;;
		--cxx) cxx=$2; shift; shift;;
		--vnctest) vnctest=$2; shift; shift;;
		--force) force=1; shift;;
		--image) DIST_IMAGE=$2; shift; shift;;
		-h) usage;;
		--help) usage;;
		*) usage;;
	esac
done

########################################################################
index=0
for elem in "${!A_IMAGES[@]}";
do
	name=$(_get_name ${A_IMAGES[$elem]})
	if [ "$DIST_IMAGE" = "$name" ]; then
		break
	fi
	index=$(( $index + 1 ))
done
G_MENU_CHOISE=${A_IMAGES[$index]}
#echo "--------------------------> $G_MENU_CHOISE"

function check_bootstrap_status()
{
	if [[ -e $STATUS_FILE_PATH/bootstrap.status ]]; then
		source $STATUS_FILE_PATH/bootstrap.status
	else
		echo "ERROR: Run before bootstrap.sh"
		exit 1
	fi
}

# Tentatively execute the bootstrap.sh
./bootstrap.sh --all # --all --> eventually re-generate also BSDs etc

#
check_bootstrap_status
if [ "$BOOTSTRAP" = "KO" ]; then
	echo -e "\e[31m* ERROR: bootstrap.sh KO\e[39m"
	exit 1
else
	echo "* Checking bootstrap.sh: $BOOTSTRAP"
fi

if [[ "$simnow_dir" == "" ]]; then
	bdir1="${root}"
	bdir2=`dirname $bdir1`
	bdir3=`dirname $bdir2`
	bdir4=`dirname $bdir3`
	sdir="simnow-linux64-${SIMNOW_SUPPORTED_VER}"
	# Make some attempt to automatically locate a simnow installation
	if [[ -d "$bdir4/$sdir" ]]; then simnow_dir="$bdir4/$sdir"; fi
	if [[ -d "$bdir3/$sdir" ]]; then simnow_dir="$bdir3/$sdir"; fi

	if [[ -d "$bdir2/$sdir" ]]; then simnow_dir="$bdir2/$sdir"; fi
	if [[ -d "$bdir1/$sdir" ]]; then simnow_dir="$bdir1/$sdir"; fi
fi

if [[ "$simnow_dir" == "" ]]; then
	echo ""
	echo "ERROR: Cannot find SimNow"
	echo "       You have to define the SIMNOW_DIR env variable"
	echo "       or pass '--simnow_dir <simnow_directory>' to $0"
	echo ""
	echo "       To download a free copy of simnow, please visit"
	echo "       http://developer.amd.com/cpu/simnow"
	echo ""
	exit 1
fi

if [[ ! -d "$simnow_dir" ]]; then
	echo "ERROR: Directory '$simnow_dir' not found..."
	exit 1
fi

#info
echo "* Detected SIMNOW_DIR: '$simnow_dir'"

simnow_dir=`cd $simnow_dir; pwd`
echo "* Using SimNow from $simnow_dir"
lib1="$simnow_dir/linuxlibs/libgcc_s.so.1"
lib2="$simnow_dir/linuxlibs/libstdc++.so.6"
if [[ -f $lib1 || -f $lib2 ]]; then
	echo "* To avoid system conflicts, we remove $lib1 and $lib2"
	/bin/rm -f $lib1 $lib2
fi
if [[ -f $lib1 || -f $lib2 ]]; then
	echo "ERROR: Something went wrong"
	echo "       make sure $simnow_dir is writeable or remove $lib1 and $lib2 manually"
	exit 1
fi

if [[ $force != 1 ]]; then
	simnow_ver=`cd $simnow_dir; ./simnow --version | awk '/SimNow version/{print tolower($6);}'|sed 's/[,-]//g'`
	if [[ $simnow_ver != $SIMNOW_SUPPORTED_VER && "${simnow_ver}pub" != $SIMNOW_SUPPORTED_VER && "${simnow_ver}nda" != $SIMNOW_SUPPORTED_VER ]]; then
		echo "ERROR: simnow version is '$simnow_ver'"
		echo "       The supported version is $SIMNOW_SUPPORTED_VER"
		exit 1
	fi
fi
echo "* SimNow version is $simnow_ver"
/bin/rm -f $root/simnow
ln -fs $simnow_dir $root/simnow


########################################################################

thread_lib="-lboost_thread -lpthread"
/sbin/ldconfig -p | grep -q boost_thread-mt
if [[ $? -eq 0 ]]; then
	thread_lib="-lboost_thread-mt -lpthread"
fi
/sbin/ldconfig -p | grep -q libboost_system
if [[ $? -eq 0 ]]; then
	thread_lib="-lboost_system $thread_lib"
fi

v=`$cc --version | head -n 1`
if [[ $v == "" ]]; then
	echo "ERROR: Cannot run $cc"
	exit 1
fi
echo "* GCC: Using $v"
v=`$cxx --version | head -n 1`
if [[ $v == "" ]]; then
	echo "ERROR: Cannot run $cxx"
	exit 1
fi
echo "* G++: Using $v"

#########################################
#./get-images.sh -d $DIST_IMAGE

echo "* Checking images and BSDs in $(_get_lpath "$G_MENU_CHOISE")/*"
echo "* Selected \"$DIST_IMAGE\" image"
list_bsds=$(ls $(_get_lpath "$G_MENU_CHOISE")/bsds | grep $DIST_IMAGE)
#echo "-----> list_bsds: $list_bsds"
if [ "$list_bsds" = "" ]; then
	echo "* BSDs of $DIST_IMAGE not found."
	echo "* Need to run bootstrap.sh as administrator."
	echo "* Or continue and generate it at the end of COTSon compilation"
else
	echo "* Linking BSDs ./data"
	ln -s $(_get_lpath "$G_MENU_CHOISE")/bsds/* data/. 2>/dev/null
	ln -s $(_get_lpath "$G_MENU_CHOISE")/images/* data/. 2>/dev/null
fi
echo "* Updating image defaults ( file: ./data/images.mk )"
#echo "---> NEED TO CHECK IF IMAGE NAME IS VALID ACCORDING WITH images.list??? <---"
sed -i "s/DIST=.*/DIST=$DIST_IMAGE/g" data/images.mk
sed -i "s/HDD=.*/HDD=$DIST_IMAGE.img/g" data/images.mk
#echo "---> NEED TO GET SECONDS FROM images.list <---"

sed -i "s/secs=.*/secs=$(_get_time "$G_MENU_CHOISE")/g" data/images.mk

##########################################################################
xfixes=""
xvncservctrl="vnc4server"
xvnc="Xvnc4"
vncargs1="-ac -SecurityTypes None -br -pn -httpd /usr/share/"
vncargs2="-desktop="

ret_command=`which lsb_release 2>&1`
check_status1=`echo "$ret_command"|grep "not found"`
check_status2=`echo "$ret_command"|grep "no lsb_release"`

if [[ "$check_status1" != "" || "$check_status2" != "" ]]; then
	str="* lsb_release not found... run bootstrap.sh as Administrator"
	echo -e "\e[31m$str\e[39m"
	exit 1
fi

DIST_UP=`lsb_release -i -s`
VERNUM_UP=`lsb_release -r -s`
#patch to use CentOS
dist=`lsb_release -i -s|cut -d " " -f 1`
dvernum=`lsb_release -r -s`
dvn1=${dvernum%.*}
distorig=""
dvernumorig=""
if [ "$dist" = "CentOS" -o "$dist" = "RedHatEnterpriseServer" ]; then
	distorig="$dist"
	dvernumorig="$dvernum"
	dist="Fedora"
	if [ "$dvn1" = "6" ]; then dvernum="14"; fi
	DIST_UP="$distorig"
	VERNUM_UP="$dvernumorig"
fi

if [[ "$DIST_UP" != "$DIST" || "$VERNUM_UP" != "$VERNUM" ]]; then
	str="* Your distribution is changed from $VERNUM to $VERNUM_UP"
	echo -e "\e[31m$str\e[39m"
	str="* Run bootstrap.sh as Administrator for fix the problem"
	echo -e "\e[31m$str\e[39m"
	exit 1
fi

if [[ "$DIST_UP" == "Debian" ||  "$DIST" == "Ubuntu" ]]; then
  llua="lua5.1"
	xvnc="Xvnc4"
	xvncservctrl="vnc4server"
	vncargs1="-ac -SecurityTypes None -br -pn -httpd /usr/share/vnc-java"
	vncargs2="-desktop="
elif [[ "$DIST_UP" == "Fedora" || "$DIST_UP" == "CentOS" ]]; then
	if [[ $dvernum -ge 20 ]]; then
		llua="lua-5.1"
	else
		llua="lua"
	fi
	xvnc="Xvnc"
	xvncservctrl="vncserver"
	vncargs1="-ac -SecurityTypes None -br -pn -httpd /usr/share/vnc-java"
	vncargs2="-desktop "
fi

grep -q XFIXES `which $xvncservctrl`

if [[ $? -eq 0 ]]; then
	xfixes="-extension XFIXES"
	echo "Adding '$xfixes' to vnc args"
fi

vncargs="$vncargs1 $xfixes $vncargs2"
vncwm="xfwm4 --display="
aa_so="$src_dir/abaeterno/abaeterno.so"
med_exe="$src_dir/network/mediator"

for s in \
        src/examples/tracer/Makefile \
        src/examples/atracer/Makefile \
        src/network/Makefile \
        src/common/Makefile \
        src/abaeterno/Makefile \
        src/libluabind/Makefile \
; do
	cp $s $s.in
done

for s in \
        src/Make.conf \
        etc/cotson \
        etc/regression-test \
        etc/daemon-start \
        web/etc/local-defaults \
        src/examples/tracer/Makefile \
        src/examples/atracer/Makefile \
        src/network/Makefile \
        src/common/Makefile \
        src/abaeterno/Makefile \
        src/libluabind/Makefile \
; do
    sed -e "s:@simnow_dir@:$simnow_dir:" \
        -e "s:@data_dir@:$data_dir:" \
        -e "s:@abaeterno_so@:$aa_so:" \
        -e "s:@mediator@:$med_exe:" \
        -e "s:@thread_lib@:$thread_lib:" \
        -e "s:@cc@:$cc:" \
        -e "s:@cxx@:$cxx:" \
        -e "s:@root@:$root:" \
                -e "s:@xvnc@:$xvnc:" \
                -e "s#@vncargs@#$vncargs#" \
                -e "s:@vncwm@:$vncwm:" \
        -e "s:llua5.1:l$llua:" \
        -e "s:\([^l]\)lua5.1:\1$llua:" \
        -e "s:llua :l$llua :" \
        -e "s:llua$:l$llua:" \
    $s.in > $s
done

#############################################################
if [[ $vnctest -gt 0 ]]; then
	echo "* Testing vncserver installation... (if your connection drops login again)"
	tmpvnc="/tmp/vnc$$"; /bin/rm -rf $tmpvnc; mkdir -p $tmpvnc
	(cd $tmpvnc; cat << 'EOF' | uudecode -o - | tar xfz - --no-same-owner)
begin 644 vnc.tgz
M'XL(`+5^Q$H``^W3S0G",!B`X=Q<(PO8]HM-LXE7J57!BY2F_BSB!&[A=#;1
MBX(4A-3+^UQ"2B`?>6EV.C2Y2JL8.&O#*LY*W$M9QO5%B9A*"N=,^"Y%*4YI
MFWBNZ.C[NM-:[;KUR+EMYZ<8:%I9Z'\);]`?VT1WA,#5L_=X_T7H;XP1I8M$
M\[RA?Y.WM??G3;([8O^A\=?^\OG_2V4,_:<PF]]6U^7^_N\Y````````````
.````\)L'`)4"J0`H````
`
end
EOF
    chmod 700 $tmpvnc/.vnc
    export HOME="$tmpvnc"
    i=0; while [[ $i -lt $vnctest ]]; do
        p=`expr 50 + $i`
        echo "Testing vnc ($xvncservctrl) port :$p"
        $xvncservctrl :$p >> $tmpvnc/log 2>&1
        $xvncservctrl -kill :$p >> $tmpvnc/log 2>&1
        i=`expr $i + 1`
    done
    nd=`grep -c 'desktop' $tmpvnc/log`
    if [[ $nd -lt $vnctest ]]; then
        echo "ERROR: only $nd/$vnctest vnc sessions worked".
        echo "       Look at $tmpvnc/log for details"
        exit 1
    fi
    /bin/rm -rf $tmpvnc
else
   echo "* Skipping 'vnc test'. Assuming it is ok."
fi

echo "./configure $status_args" > config.status
chmod +x config.status
echo "* For more options, type $0 -h"
str="* Done"
echo -e "\e[32m$str\e[39m"
str="* Now you can run: make release"
echo -e "\e[32m$str\e[39m"
