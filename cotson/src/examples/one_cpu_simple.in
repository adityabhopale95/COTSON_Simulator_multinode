options = {
	max_nanos="10M", -- after 10M nanos, the simulation ends
	sampler={ type="simple", quantum="100k" }, -- quantum is in cycles
		-- simple means timing simulation is always on
		-- depending on the MHz of the machine, this should
		-- print between 5 and 10 TIME=... messages
	heartbeat={ type="file_last", logfile="one_cpu_simple.log" }, 
		-- one result file called one_cpu_simple.log
}

-- change this to point to your bsd and hdd
-- you can use absolute paths here or else
-- placed the bsd and hdd in the data directory
-- of this distribution
simnow.commands=function()
	use_bsd('1p-karmic64.bsd')
	use_hdd('karmic64.img')
	set_journal()
	-- this next string is input by simulating
	-- keystrokes. Our machine is in text mode
	-- expecting a command and this next command
	-- will execute a simple script
	-- You do not need to issue the \n
	send_keyboard('gcc -O3 -c -w /home/user/test.i')
end

function build()
	-- we assign disk timers to all the disks in the system
	i=0
	while i < disks() do
		disk=get_disk(i)
		disk:timer{ name='disk'..i, type="simple_disk" }
		i=i+1
	end

	-- we assign nic timers to all the disks in the system
	i=0
	while i < nics() do
		nic=get_nic(i)
		nic:timer{ name='nic'..i, type="simple_nic" }
		i=i+1
	end

	-- this experiment only works if the BSD has 1 unique CPU
	x=cpus()
	if x ~= 1 then
		error("This experiment only wants to handle 1 cpu")
	end

	cpu=get_cpu(0)
	cpu:timer{ name='cpu0', type="timer0" }

	mem=Memory{ name="main", latency=150, write_latency=50, slots=8  } 

    l2=Cache{ name="l2cache", size="512kB", 
		line_size=16, latency=20, num_sets=4, next=mem, 
		write_policy="WB", write_allocate="true" }
    t2=TLB{ name="l2tlb", page_size="4kB", 
		entries=512, latency=80, num_sets=4, next=mem, 
		write_policy="WB", write_allocate="true" }

    ic=Cache{ name="icache", size="16kB", line_size=16, 
		latency=0, num_sets=2, next=l2, 
		write_policy="WT", write_allocate="false" }
    dc=Cache{ name="dcache", size="16kB", line_size=16, 
		latency=0, num_sets=2, next=l2, 
		write_policy="WT", write_allocate="false" }
    it=TLB{ name="itlb", page_size="4kB", entries=40, 
		latency=0, num_sets=40, next=t2,	
		write_policy="WT", write_allocate="false" }
    dt=TLB{ name="dtlb", page_size="4kB", entries=40, 
		latency=0, num_sets=40, next=t2, 
		write_policy="WT", write_allocate="false" }

	cpu:instruction_cache(ic)
	cpu:data_cache(dc)
	cpu:instruction_tlb(it)
	cpu:data_tlb(dt)
end
-- vim:ft=lua
