#!/usr/bin/ruby
# (C) Copyright 2009 Hewlett-Packard Development Company, L.P.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

# $Id: daemon-start 6977 2009-12-09 16:18:35Z frb $

$: << File.expand_path(File.dirname(__FILE__) + '/../share')

require 'cotson'
require 'fileutils'

begin
	lua_defs=LuaDefinitions.new

	opts=Options.new(lua_defs)
	opts.load :daemon_port 

	host=this_host
	
	f=$here.daemon('config',"#{host}.pid")
	if File.exist?(f) then
		pid=IO.read(f).chomp.to_i
  		raise CotsonError.new(:DaemonStart, :host=>host, :port => opts[:daemon_port], :file=>f, :directory => File.dirname(__FILE__), :pid=>pid) 
  	end

	FileUtils.cd($here.daemon) do
		require './config/boot.rb'
		require RAILS_ROOT + "/config/environment"
		require 'webrick_server'

		%w(cache pids sessions sockets).each do |dir_to_make| 
			FileUtils.mkdir_p(File.join(RAILS_ROOT, 'tmp', dir_to_make)) 
		end

		pid=Process.fork do 
			$stderr=File.open($here.daemon('log',
				"#{host}.stderr.log"),"w") 
			$stderr.sync=true
			$stdout=File.open($here.daemon('log',
				"#{host}.stdout.log"),"w") 
			$stdout.sync=true
			DispatchServlet.dispatch({
			  :port         => opts[:daemon_port],
			  :ip           => "0.0.0.0",
			  :environment  => (ENV['RAILS_ENV'] || "development").dup,
			  :server_root  => File.expand_path(RAILS_ROOT + "/public/"),
			  :server_type  => WEBrick::SimpleServer, 
			  :charset      => "UTF-8",
			  :mime_types   => WEBrick::HTTPUtils::DefaultMimeTypes,
			  :debugger     => false,
			  'working_directory' => File.expand_path(RAILS_ROOT)
			})
		end
		Process.detach(pid)
		
		File.open($here.daemon('config',
			"#{host}.pid"),"w") do |f|
			f.puts pid
		end
	end

rescue Exception => e
	finish e
end
