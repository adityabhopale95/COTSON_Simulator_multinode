options = {
	max_nanos="7M",
	sampler={
	    type="dynamic", 
		warming="10k",simulation="190k",functional="1000k",maxfunctional="10",
		variable={"cpu.*segv_exceptions","cpu.*haltcount"},
		window=20, sigma=2.0,
		sensitivity=70,
	},
	heartbeat={ type="file_last" },
}

simnow.commands=function()
	-- for a longer example, see test.regression/001/abaeterno_input 
	use_bsd('4p-karmic64.bsd')
	use_hdd('karmic64.img')
	set_journal()
	set_quantum(50000)
	send_keyboard('cd /home/user;./4xgcc.sh')
end

function build()
	i=0
	while i < disks() do
		disk=get_disk(i)
		disk:timer{ name='disk'..i, type="simple_disk" }
		i=i+1
	end

	i=0
	while i < nics() do
		nic=get_nic(i)
		nic:timer{ name='nic'..i, type="simple_nic" }
		i=i+1
	end
	
	mem=Memory{ name="main", latency=150 } 
	bus=Bus{ name="bus", protocol='MOESI', latency=25, bandwidth=1, next=mem } 
	busT=Bus{ name="tlb_bus", protocol='MOESI', latency=25, bandwidth=1, next=mem }

	i=0
	while i < cpus() do

		cpu=get_cpu(i)
		cpu:timer{ name='cpu'..i, type="timer1" }
	
        l2=Cache{ name="l2cache", size="512kB", line_size=16, latency=20, num_sets=4, next=bus, write_policy="WB", write_allocate="true" }
        t2=TLB{ name="l2tlb", page_size="4kB", entries=512, latency=80, num_sets=4, next=busT, write_policy="WB", write_allocate="true" }

        ic=Cache{ name="icache", size="16kB", line_size=16, latency=0, num_sets=2, next=l2, write_policy="WT", write_allocate="false" }
        dc=Cache{ name="dcache", size="16kB", line_size=16, latency=0, num_sets=2, next=l2, write_policy="WT", write_allocate="false" }
        it=TLB{ name="itlb", page_size="4kB", entries=40, latency=0, num_sets=40, next=t2, write_policy="WT", write_allocate="false" }
        dt=TLB{ name="dtlb", page_size="4kB", entries=40, latency=0, num_sets=40, next=t2, write_policy="WT", write_allocate="false" }

		cpu:instruction_cache(ic)
		cpu:data_cache(dc)
		cpu:instruction_tlb(it)
		cpu:data_tlb(dt)

		i=i+1
	end
end
-- vim:ft=lua
