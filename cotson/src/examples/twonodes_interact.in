runid="twonodes_interact"
tmpdir=os.getenv("PWD")
one_node_script='functional'
display=os.getenv("DISPLAY")


-- Other interesting variables:
--   data_dir="/home2/data/4.6.2pub"
--   simnow_dir="/home/opt/cotson/tools/simnow/simnow-linux64-4.6.2pub"
--   abaeterno_so="/home/frb/cotson/trunk/abaeterno/abaeterno.so"
--   mediator_file="/home/frb/cotson/trunk/abaeterno/mediator"
--   Xvncwm="twm -display "

--copy_files_prefix="log."..os.time().."."
copy_files_prefix=runid.."."
debug=true
debug2=true

control_script_file='twonodes_interact-ctrl'
-- clean_sandbox=false
-- node_config="config.sh"


-- DBFILE="/tmp/twonodes_interact.db"
DESC="Two nodes example (NO VNC)"
EXP=10

cluster_nodes=2
options = {
    sampler={ type="no_timing", quantum="100k" },
    heartbeat={ type="file_last" },
    heartbeat1={ type="sqlite", dbfile=DBFILE, experiment_id=EXP, experiment_description=DESC },
    network_cpuid=true, -- send cpuid 'tracer' commands to all nodes
}

-- Poor man's multicast disambiguation (pid-based)
MCAST= (cotson_pid % 200) + 1
mediator = {
    verbose=1,
    multicast_ip="239.200.1."..MCAST,
    quantum_min=10,
    quantum_max=1000,
    heartbeat_interval=10000, -- 10msec
    heartbeat={ type="file_last" },
    heartbeat1={ type="sqlite", dbfile=DBFILE, experiment_id=EXP },
    timer={ type="simple", max_bandwidth=1000, latency=12, cfactor=10 },
    tracefile=NTFILE, -- dump a trace
    slirp=true, -- NAT with the external world
    slirp_network="192.168.10.0", -- Base network for nodes
    redirect_port="11:22:2222",   -- Redirect port 22 of n12 (192.168.10.11) to host port 2221
}

simnow.commands=function()
    use_bsd('1p-karmic64.bsd')
    use_hdd('karmic64.img')
    set_journal()
    set_network()
    execute('loop.sh') -- loop forever
end

function build()
    i=0
    while i < disks() do
        disk=get_disk(i)
        disk:timer{ name='disk'..i, type="simple_disk" }
        i=i+1
    end

    i=0
    while i < nics() do
        nic=get_nic(i)
        nic:timer{ name='nic'..i, type="simple_nic" }
        i=i+1
    end

    x=cpus()
    if x ~= 1 then
        error("This experiment only wants to handle 1 cpu")
    end

    cpu=get_cpu(0)
    cpu:timer{ name='cpu0', type="timer0" }
    mem=Memory{ name="main", latency=1 } 
    cpu:instruction_cache(mem)
    cpu:data_cache(mem)
    cpu:instruction_tlb(mem)
    cpu:data_tlb(mem)
end

--- This is for remote execution (with daemons). Edit as appropriate
-- tmpdir="/tmp"
-- scheduler = {
    -- policy='load-balance', 
    -- policy='round-robin', 
    -- hosts = { 'hpl-bro10.esp.hp.com:4040', 'hpl-bro05.esp.hp.com:4040' }
-- } 

-- vim:ft=lua

