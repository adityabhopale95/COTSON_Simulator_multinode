#!/usr/bin/perl
## (C) Copyright 2006-2009 Hewlett-Packard Development Company, L.P.
## $Id$
use DBI;
use strict;

$SIG{INT} = sub { die("caught ctrl-c, goodbye\n"); };

my $refresh = 0;
my $host=$ARGV[0] or usage($0); shift;
my $exp=$ARGV[0] or usage($0); shift;
my $png;
my $geometry = "800x300+0+0";
my $pngsz = "1024,768";
my $sim_freq = "2.2"; # GHz
my $yrange = "50000:10"; # GHz
my $nnodes = 0;
my $mintime = 0.0;
my $maxtime;
my $xreal=0;
my $verbose = 0;
while ($#ARGV >= 0) {
    my $arg = $ARGV[0];
       if ($arg eq "-p")  { shift; $png = $ARGV[0]; }
    elsif ($arg eq "-ps") { shift; $pngsz = $ARGV[0]; }
    elsif ($arg eq "-r")  { shift; $refresh = $ARGV[0]; }
    elsif ($arg eq "-sz") { shift; $geometry = $ARGV[0]; }
    elsif ($arg eq "-t")  { shift; ($mintime,$maxtime) = interval($ARGV[0]); }
    elsif ($arg eq "-v")  { $verbose = 1; }
    elsif ($arg eq "-y")  { shift; $yrange = $ARGV[0]; }
    elsif ($arg eq "-db") { shift; $host = $ARGV[0]; }
    elsif ($arg eq "-xreal") { $xreal=1; }
    else { usage($0); }
    shift;
}

my %SPEED;

my $maxnanos = $mintime;
my $dbh;
if ($host =~ s/file://) {
    ## sqlite
	print "Using SQLite connector\n";
    $dbh = DBI->connect("dbi:SQLite:dbname=$host;");
	$dbh->func('regexp',2,sub{my($r,$s)=@_;return $s=~/$r/;},'create_function'); 
}
else {
    ## postgres
    my $username="cotson";
    my $dbname="cotson";
    $dbh = DBI->connect("dbi:Pg:dbname=$dbname;host=$host","$username");
}

my $expdesc = get_description($dbh);
my $sim_freq = get_frequency($dbh,$sim_freq);
my $host_freq = get_host_frequency();

## Metrics query
my %TIMES;
print "refresh rate is $refresh s\n";
print "ctrl-c to stop\n";
do {
    print "========================================\n";
    print "start from time ",$maxnanos*1e-6," ms\n";

    my $tmax = 0;
    my $query = speedquery($exp,$maxnanos,$maxtime);
    my $sth = $dbh->prepare($query);
    my $rv = $sth->execute();
    print "query\n$query\ndone\n";
    my $tmx = fillmetric($sth,$mintime);
    $tmax = $tmx > $tmax ? $tmx : $tmax;

    if ($tmax > $maxnanos) {
        $maxnanos = $tmax;
		printmetric("speed-$exp.dat");

		## print gnuplot file
        open FH, ">speed-$exp.gp";
        if ($png) {
            print FH "set terminal png giant notransparent size $pngsz\n";
            print FH "set output '$png'\n";
        }
		else {
            print FH "set terminal x11 \n";
            # print FH "set terminal wxt \n";
		}
        print FH "set title \"$expdesc (self-rel slowdown)\"\n" if $expdesc;
        print FH "set grid\n";
        print FH "set ytics (10, 20, 50, 100, 200, 500,'1k' 1000, '2k' 2000, '5k' 5000, '10k' 10000, '20k' 20000, '50k' 50000) \n";
        print FH "set yrange [$yrange]\n";
        print FH "set logscale y\n";
        print FH "plot 'speed-$exp.dat' with steps lw 1 notitle\n";
        print FH "pause ",$refresh+1,"\n" if (!$png and $refresh > 0);
        # print FH "pause -1\n" if (!$png and !$refresh);
        close FH;
    }
	if ($tmax) {
        my $rr = (!$png && $refresh > 0);
        print "start gnuplot\n";
        system("gnuplot "
		       . ($rr?"":"-persist ") 
			   . "-geometry $geometry "
		       . "speed-$exp.gp".($rr?"&":""));
	}
	else {
	    print "no available experiment data\n";
	}
    sleep($refresh);
}
while($refresh > 0);

$dbh->disconnect();
exit(0);

#######################################################################################
sub usage 
{
    die "
Usage: $0 host experiment_id  [options]
    Options:
          [-f freq]               clock frequencey in GHz, normally not needed
          [-p png]                produce a png
          [-ps pngsize(x,y)]      pagesize for png
          [-r refresh_rate]       refresh (in s)
          [-sz geometry]          window geometry for X11 terminal
          [-t mintime]            start time (in ms)
          [-y yrange]             y axis range
          [-xreal]                use realtime for x axis
          [-v]                    verbose
    \n";
}

## Exp description
sub get_description 
{
    my $dbh = shift;
    my $query = "SELECT description from experiments where experiment_id=$exp;";
    my $h = $dbh->prepare($query);
    my $v = $h->execute();
    my $exp = ($h->fetchrow_array())[0] if ($v==0);
    print "EXPERIMENT = $exp\n";
    $h->finish();
    return $exp;
}

## Frequency
sub get_host_frequency 
{
    return 2.0;
}

sub get_frequency 
{
    my $dbh = shift;
    my $f = shift;
    my $query = "SELECT value FROM metrics
             WHERE metric_id IN (SELECT metric_id FROM metric_names WHERE name='simnow.cycles_per_usec')
             AND heartbeat_id IN (SELECT heartbeat_id FROM heartbeats WHERE machine_id>0 AND experiment_id=$exp LIMIT 1);";
    my $h = $dbh->prepare($query);
    my $v = $h->execute();
    $f = (($h->fetchrow_array())[0])/1000.0 if ($v==1);
    print "FREQUENCY = $f GHz\n";
    $h->finish();
    return $f;
}

sub speedquery 
{
    my $exp = shift;
    my $t0 = shift;
    my $t1 = shift;
    return "SELECT nanos,date FROM heartbeats WHERE machine_id>0 AND experiment_id=$exp". 
		($t0 ? " AND $t0 <= nanos ": "") .
		($t1 ? " AND nanos < $t1 " : "") .
		" ORDER BY heartbeat_seq";
}

sub interval 
{
    my $t = shift;
	my ($t0,$t1) = split(':',$t);
	return ($t0 * 1e6, $t1 * 1e6);
}

sub fillmetric
{
	my $sth = shift;
    my $mintime = shift;
    my $met = shift;
    my $nodes = shift;
    my $qq = shift;

	my $tmax = $mintime;
	my $real_s0 = 0;
	my $sim_ns0 = 0;
	my $first = 1;
	my $nr = 0;
    while (my @row = $sth->fetchrow_array()) {
		$nr++;
        my $sim_ns = $row[0]; # sim nanos
        my $real_d = $row[1]; # real date
        my $real_s = date2s($real_d); # realtime in s

		if ($first) { $first = 0; }
		else {
		    my $real_ns_d = ($real_s - $real_s0) * 1e9;
	        my $sim_ns_d = ($sim_ns - $sim_ns0);

			## convert everything to "cycles"
			my $real_c = $real_ns_d * $host_freq;
			my $sim_c  = $sim_ns_d  * $sim_freq;
			if ($sim_c && $real_c) {
			    my $slowdown = $real_c / $sim_c;
				my $x = $xreal ? $real_s : ($sim_ns * 1e-6);
			    $SPEED{$x} = $slowdown;
			}
		}

		$real_s0 = $real_s;
		$sim_ns0 = $sim_ns;
		$tmax = $sim_ns if ($sim_ns > $tmax);
    }
	print "$nr rows\n";
	return $tmax;
}

sub printmetric
{
	my $outfile = shift;
    open FH, ">$outfile";
	my $t0 = 0;
    foreach my $tx (sort {$a<=>$b} keys %SPEED) {
		$t0 = $tx unless $t0;
		my $s = $SPEED{$tx};
		my $t = $tx - $t0;
        print FH "$t $s\n";
    }
    close FH;
}

sub date2s
{
## 2008-10-01 19:46:34.823048
   my $x = shift;
   my ($s1,$s2) = split(' ',$x);
   my ($yy,$mm,$dd) = split('-',$s1);
   my ($h,$m,$s,$us) = split(/[:\.]/,$s2);
   my $sec = ((($dd * 24 + $h) * 60 + $m) * 60 + $s) + $us/1e6;
   print "$x => $sec\n";
   return $sec;
}

