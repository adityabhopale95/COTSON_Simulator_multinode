abaeterno_so="abaeterno-atracer.so"

options = {
    -- enable custom instruction (including the atracer)
    custom_asm=true,

    -- Tell simulation to end after completion
    -- The execution script must "xput" a file called terminate
    exit_trigger='terminate',

    -- selective sempler
    sampler={ type="selective_tracing",quantity="2",constructor="sampler_constructor",changer="zone_changer" },

    -- one result file in atracer.log
    heartbeat={ type="file_last", logfile="atracer.log" }, 
}
one_node_script="run_interactive"
--display=os.getenv("DISPLAY")

-- the function that decides what timer to use
function sampler_constructor(i)
    if i == 0 then return {type="no_timing", quantum="3M"} end
    if i == 1 then return {type="simple", quantum="1M"} end 
end

-- the function that decides the zone sequence
function zone_changer(start,i)
    if start then -- entering zone i
        print("### entering zone " .. i)
	    return 1
    end
    if not start then -- leaving zone i
        print("### leaving zone " .. i)
            return 0
    end
end

-- change this to point to your bsd and hdd
-- you can use absolute paths here or else
-- place the bsd and hdd in the data directory
-- of this distribution
simnow.commands=function()
    use_bsd('1p-karmic64.bsd')
    use_hdd('karmic64.img')
    set_journal()
    -- we execute run.sh which invokes the custom tracer
    execute('run.sh');
end

function build()
    i=0
    while i < disks() do
        disk=get_disk(i)
        disk:timer{ name='disk'..i, type="simple_disk", }
        i=i+1
    end

    i=0
    while i < nics() do
        nic=get_nic(i)
        nic:timer{ name='nic'..i, type="simple_nic", }
        i=i+1
    end

    --memory hierarchy
    mem=Memory{name="main", latency=100}
    l3=Cache{name="l3cache", size="4096kB", line_size=64, latency=20, num_sets=4, next=mem, write_policy="WB", write_allocate="true"}
    bus=Bus{name="bus", protocol="MOESI", latency=25, bandwidth=4, next=l3}
    busT=Bus{name="tlb_bus", protocol="MOESI", latency=25, bandwidth=4, next=l3}

    i=0
    while i < cpus() do
        cpu=get_cpu(i)
        cpu:timer{ name='cpu'..i, type="timer0" }
        l2=Cache{name="l2cache", size="256kB", line_size=64, latency=5, num_sets=2, next=bus, write_policy="WB", write_allocate="true"}
        t2=TLB{name="l2tlb", page_size="4kB", entries=512, latency=1, num_sets=1, next=busT, write_policy="WB", write_allocate="true"}
        ic=Cache{name="icache", size="32kB", line_size=64, latency=2, num_sets=4, next=l2, write_policy="WT", write_allocate="false"}
        cpu:instruction_cache(ic)
        dc=Cache{name="l1cache", size="16kB", line_size=64, latency=3, num_sets=2, next=l2, write_policy="WT", write_allocate="false"}
        cpu:data_cache(dc)
        it=TLB{name="itlb", page_size="4kB", entries=64, latency=1, num_sets=1, next=t2, write_policy="WT", write_allocate="false"}
        cpu:instruction_tlb(it)
        dt=TLB{name="dtlb", page_size="4kB", entries=64, latency=1, num_sets=1, next=t2, write_policy="WT", write_allocate="false"}
        cpu:data_tlb(dt)
        i=i+1
    end
end

-- vim:ft=lua
