These set of files present some examples of what cotson can do. In this README
I will try to explain the different options used in the lua files, but first,
some common background regarding lua files and the way cotson understands
parameters and files.

§ Parsing of lua commands:

Cotson scripts accept lua parameters either in files or in the command line.
Anything that is not strictly an existing file, is considered lua syntax. The
concatenation of the contents of all the files and the lua syntax is considered
to be the lua program that is passed along to whatever part of cotson that
needs it (cotson control, the abaeterno library and more). Not every part of
the lua files are needed by all of these parts, but it is up to each part to
determine what they need from the lua. Do not worry if you are losing your
mind, a couple of examples follow:

cotson a b c d

This is a normal incantation of cotson, with four parameters in the command
line. The cotson infrastructure will check to see if files with those names
exist (relative to the PWD) and if so, their contents will be concatenated. If
we assume that a and c are existing files, the command will be passed the
following contents:

<contents of etc/cotson>
<contents of a>
b
<contents of c>
d

This behaviour allows us to separate different behaviour into different files,
so that experiments are more easily handled. It also allows us to check stuff
quickly, without editing files. For example, you may want to run the functional
example present in this dir, but with an extra option that leaves the sandbox
intact instead of deleting it. You could edit the functional.in file or just
issue the lua command in the command line:

cotson functional.in clean_sandbox=true

Although this approach is quite flexible, it has some problems. First and
foremost, if you make an error typing the name of a file, it will be assumed to
be lua syntax and cause an error. This is very frequent, specially since files
get deleted or in cases where you move out of a directory. A file name is not
legal lua syntax, so this error will produce an error when any part of cotson
parses the file. The first one to parse the file is usually cotson control,
responsible for setting up your experiment. Let us see what happens when you
make this mistake yourself. Imagine you try to execute functional.in and you
mistake the name of that file:

cotson function.in

You will get the following error:

Error LuaParsing:
Error parsing configuration file with lua (it is very likely a syntax error).
COTSon was attempting to get a value for the variable one_node_script
Possible solution:
Check your lua file for syntax errors and check if the files passed as parameter to COTSon exist.
To reproduce the error with lua execute '/home/dortega/trunk/control/share/lua /home/dortega/trunk/control/share/one_node_script.lua /tmp/lua20307.in'.
Command output:
   /home/dortega/trunk/control/share/lua: /tmp/cotson-lua20091123-20307-de0ymp-0:31: '<name>' expected near '.'
   stack traceback:
   	[C]: in function 'dofile'
   	/home/dortega/trunk/control/share/defaults.lua:200: in main chunk
   	[C]: in function 'dofile'
   	...home/dortega/trunk/control/share/one_node_script.lua:6: in main chunk
   	[C]: ?
Extended information:
status = [1]
variable = [one_node_script]
luainput = [/tmp/lua20307.in]
script = [/home/dortega/trunk/control/share/one_node_script.lua]
lua = [/home/dortega/trunk/control/share/lua]

The error tries to give you a lot of information. Please do not disregard this
output, in many cases it is very valuable to determine what happens. In this
case it is not so valuable, since the error is very simple, but it still lets
you figure it out. Notice how in the first line it says that this is probably a
syntax error. The error also tries to tell you what it was trying to do with
the file (the one that gets created from your incantation) but in this example,
this is superfluous to us. The good thing is that the script will produce a
temporal file with the contents that caused the error (in this case
/tmp/lua20307.in) which you can read. If you open this file and go to line 31
(where the error seems to be) you can see that there is a whole line with the
word function.in which is obviously not correct lua syntax.

Another typical error is caused by incorrect quoting caused by the shell. We
will see this with another example. Lua syntax to assign a string to a variable
is as follows:

variable="lua string"

or 

variable='lua string'

If you put this exact string in your command line, due to the way most shell
languages behave, it will get incorrectly quoted into lua, thus causing an
error. You should double quote these lua commands so that they do not cause
problems to you, as in the next example:

cotson functional.in 'variable="lua string"'

§ Different options for different parts:

Different parts of the lua input file are used by different parts of cotson.
Anything inside options table or in the build function are used by abaeterno.
The SimNow table is used by the control scripts to determine how to set up the
SimNow execution. The rest of the commands are used by the control and web
interface to determine what kind of execution to make. In the explanation of
the following input files you will get a grip on the different possibilities.
For more information regarding anything, please read the source.

§ A functional simulation

A functional simulation is one that does not involve timing at all. This can be
done in two different ways, by loading abaeterno and selecting a no_timing
sampler or by not loading abaeterno, and leaving SimNow to run natively. This
first example (functional.in) is an example of the latter.

If you open functional.in you will see a very simple lua input file. Remember
that cotson prepends the contents of etc/cotson to each execution. This etc
file has defaults for many of the most common things. 

The command one_node_script allows us to tell cotson that we want a functional
simulation and not the typical 'run' script. If you want to run cotson inside
gdb you can change this value into 'gdb' and off you go debugging.

The simnow.commands function is used to determine what bsd and hdd to use, and
in this case for nothing more. In following examples you will see how we can
instruct cotson to run some command for us inside SimNow or even to execute a
complete script inside SimNow.

§ A simple example of timing with one core

The contents of the one_cpu_simple.in file are heavily described inside it.
Notice how this file only has lua options for abaeterno (build function and
options table) and for SimNow (simnow.commands). The simnow.commands function
introduces a new option in the form of a function 'send_keyboard'. This
function allows us to send keyboard strokes to the running system. For this to
work you must be starting a system which is expecting input through its
keyboard. This can be attained if you stop a virtual machine while the console
is receiving input. Since this mechanism uses the keyboard buffer it will not
accept very long commands. 

The build function is where we determine timing models for all the different
devices. In this particular example we are looking at very simple models for
all the disks and NIC and we are also assuming there is only one core (we will
die with an error if the BSD has more than one). The timing model for the core
is a very simple one (in which we are leaving out all default parameters) and
we are setting up a memory hierarchy composed of an instruction and data cache,
a second level cache and main memory.

The options table sets up three very important values, the max_nanos, the
sampler table and the heartbeat table. The latter two are fundamental and must
always be present. The sampler determines what sampling strategy to use. Refer
to the documentation to learn about the diffeerent possibilities and the
parameters for each one of them. The heartbeat is used to determine when to
produce output and in what form. This example uses just one file at the end of
the simulation.  Other possibilities include logging to a database and
producing one file after each sample.

The max_nanos is one of the multiple ways (others include max_samples and
exit_trigger) to tell cotson when to finish. In this case after max_nanos have
passed, cotson will finish. Note that this is only checked after complete
samples, so you will not break simulation at undesireable points.

§ A slightly more complicated example with many cores

The 'multiple_cpu_interval.in' presents a slightly more complicated (from the
timing perspective) example. The main differences with the previous example are
in the build function. Instead of relying on just one core, this input file
allows several cores, and connects them through a coherence bus. By using lua,
we are able of very complicated memory hierarchies. If for example, in this
file we move the L2 cache incantation out of the loop, we will be forcing all
cores to share that common L2. If we use nested loops, we can have hierarchies
which share L2 among several cores while having private L1 caches. Since
everything is programatically described, it is up to the user to define its
memory hierarchy.

This example also introduces the use of max_samples. Instead of waiting an
amount of nanos, this simulation will end after max_samples have passed. These
samples are always simulation samples, so max_samples is the way of saying
simulation data points.  Notice how we also use a different sampler for this
example.

§ Using cotson to produce traces

The input file trace_stats.in is the perfect example of how to use the CpuTimer
infrastructure for something other than timing itself. The timer trace_stats is
a fake timer that basically computes statistics from the code executed and
potentially stores the trace to disk. We give out this timer out so that SDK
users can play around producing the information they need.

Another example which can produce traces is mem_tracer. This example presents a
fake memory object in the memory hierarchy that acts as a transparent proxy and
dumps every memory access to disk. In this example we have put the Tracer just
before the main memory, so we will be producing a file that dumps each main
memory access to disk. Had we put this kind of tracer before the L2 or before
the L1 we would be producing different kinds of traces.

§ User hooks

Cotson can be used and modified to receive input from inside the system. We
distribute some tools (cotson_tracer is one of them) that let you do so. We
also distribute libraries that let you compile your own programs which may
communicate with devices inside cotson. This particular example needs a
particular hook inside cotson. Our SDK is distributed with the example that
builds these internal hooks inside cotson.

This example file 'cotson_tracer.in' is an example of the exit_trigger
functionality. The exit_trigger tells cotson that you want the simulation to
end when a particular file appears in the host enviroment. We then use the
send_keyboard function to instruct the internal system to produce a file (touch
x) and send it outside (using xput) into this exit trigger and the end of the
simulation. This is a way of allowing simulation to take place for complete
applications. 

§ Cluster example

The last two files described in this document are 'twonodes.in' and 'ping.sh'
which comprise a cluster example. If you look inside twonodes.in you will see
that besides the typical build, options, and simnow.commands, there is also a
mediator table and plenty of individual commands floating around. These
commands will be described in the next section where we give an overview of
cotson control commands, but basically are there to instruct cotson of how to
run the two instances of SimNow and the mediator and how to hook them up
together to form a cluster simulation. Nevertheless, in order to run a cluster
simulation you also need to slightly modify the simnow.commands function.
Notice how instead of using send_keyboard function we are using the 'execute'
function. This function instructs cotson to load the ping.sh script into each
node and execute it there. 

Since this node must work for each node, when running it, it is passed two
parameters, the node id (running from 1 to N) and the total amount of nodes. As
you can see in the ping.sh script, the first node basically pings the second
one while the other one does nothing (just waits for those pings). The
simnow.command also has two new functions, set_network and subscribe_result.
The function 'set_network' instructs cotson to prepare the particular bsd to
have network. This is not trivial at all, so you better start with one of our
examples and modify it from there to suit your needs. Cotson will use a series
of network commands to ensure that the network starts correctly on each node
before starting the simulation. This allows us to use the same BSD for all the
cluster, since later this functionality is going to be responsible of changing
the MAC addresses of each node and starting the network in an appropriate
manner.

The function 'subscribe_result' will let you describe as many elements as you
wish, and it will be responsible of gathering all that output files for you and
placing them outside the virtual environment once the simulation has finished.

§ Lua Options:

In this section I will try to list as many lua options as possible and describe
their meaning. This list is (cant be, and will never be) exhaustive.  Please
refer to the source code of each module (or its documentation if it exists) to
understand everything in more detail.

- Control commands

Control commands live outside any function or table and are used by the control
scripts to determine how to run the simulation.

-- Helpers setup

Cotson uses many existing tools such as screen and rxvt to control the
different applications to use. Reasonable defaults are described inside
etc/cotson for these applications but you can always use variations if you
change the following variables

vncviewer   what application to use to view VNC sessions
xterm       what application to open when a X terminal is needed
screen      what application to use when a 'screen' terminal is needed
Xvnc        what VNC server to use
Xvnc_args   special parameters for the VNC server
Xvncwm      what window manager to use

-- Files presence

Cotson will produce a sandbox with all the contents needed for each node in the
simulation. In order to do this, it will need to know where certain files are
(the bsd, the hdd, the abaeterno library). Since these files are sometimes very
big (like the hdd) it is also possible to instruct cotson to just link the
files and not really copy them. The variables (functions) that control this
part of the simulation are:

abaeterno_so        location of the abaeterno.so library
abaeterno_so_link   do we want to copy of link it
bsd                 location of the BSD
bsd_link            do we want to copy of link it
hdd                 location of the HDD
hdd_link            do we want to copy of link it
mediator_file       location of the mediator executable
mediator_link       do we want to copy of link it
simnow_dir          location of the SimNow distribution
simnow_dir_link     do we want to copy of link it
user_script         location of the cluster input script

Notice how bsd, hdd and user_script are not really set up directly, but via the
use of the functions use_bsd, use_hdd and user_script inside the
simnow.commands function.

copy_files          what files to copy from the sandbox
copy_files_prefix   what name to prepend to each file copied from the sandbox

The function subscribe_result (executed inside the simnow.commands) will
augment copy_files with whatever file is brought from inside the virtual
enviroment into the sandbox.

-- Other cotson control variables are:

clean_sandbox          should we delete the sandbox at the end of the execution
cluster_nodes          how many nodes does this simulation have
control_script_file    name of the cluster control file to produce
data_dir               default location to store BSDs and HDDs
debug                  should we print debug information
one_node_script        what to run inside the sandbox
display                name of display (e.g. localhost:0.0) to use
                       if you say auto, each X application will open a display
                       inside their own VNC server which you will be able to
                       control remotely.

§ AbAeterno Options:

These are some of the options that are needed by AbAeterno. Recall that in some
cases these options are presented in the manner of tables themselves, and as
such the particular subfields of those tables depends on the particular object
being instantiated. For example, sampler accepts a lua table, but the
parameters inside that lua table depend on the particular sampler being
instantiated.  See the different examples and the different constructors in the
files in this directory and if in doubt, read the source code. All the following
options have to appear inside the options lua table.

help                 print out help defining the different options
version              print out the version of abaeterno
log_options          should we log to stdout all options requested
log_sim_time         should we print the CPU time used by the process
print_unknown        should we print out the presence of unknown options
allow_unknown        should we allow unknown options
max_nanos            maximum amount of nanos to simulate
max_samples          maximum amount of simulation samples to simulate
exit_trigger         filename to trigger simulation exit
fastforward          length of fastforwarding phase (nanos)
time_feedback        should we send time feedback to Simnow
sampler              what samplers to use (lua table dependent on type of sampler)
heartbeat            what heartbeat to use (lua table dependent on type of sampler)
prefetch             functionally simulate prefetch operations
cmdport              Command port
cmdfile              File where to write command port

When running one unique node, it is simpler to get network by using slirp. 
The following parameters allow to set up slirp.

slirp                should we start a internal slirp mediator
slirp_control_port   control port for internal slirp mediator
slirp_data_port      data port for internal slirp mediator
slirp_redir_tcp      tcp redirections for internal slirp
slirp_redir_udp      udp redirections for internal slirp
slirp_network        slirp network
