options = {
	max_nanos="1M",
	sampler={ type="simple", quantum="100k" },
	heartbeat={ type="file_last" },
}

simnow.commands=function()
	-- by default it checks for existance of bsd, hdd, ... 
	-- use this next function if you do not want this to happen
	-- do_not_check_for_existance()
	use_bsd('1p-karmic64.bsd')
	use_hdd('karmic64.img')
	set_journal()
	send_keyboard('cd /home/user; ./176.gcc.test.sh')

-- other helper functions include set_quantum(#)
-- and of course, you can just print whatever you want and it will 
-- work, for example, the former is equivalent to this (dependent
-- on DATA_DIR, of course):
--
-- print [[open /home2/data/4.4.3nda/1p.bsd
-- ide:0.image master /home2/data/4.4.3nda/deb64.hdd
-- ide:0.journal master on
-- keyboard.key 02 82
-- keyboard.key 08 88
-- keyboard.key 07 87
-- keyboard.key 34 B4
-- keyboard.key 22 A2
-- keyboard.key 2E AE
-- keyboard.key 2E AE
-- keyboard.key 34 B4
-- keyboard.key 14 94
-- keyboard.key 12 92
-- keyboard.key 1F 9F
-- keyboard.key 14 94
-- keyboard.key 34 B4
-- keyboard.key 1F 9F
-- keyboard.key 23 A3
-- keyboard.key 1C 9C]]
end

function build()
	i=0
	while i < disks() do
		disk=get_disk(i)
		disk:timer{ name='disk'..i, type="simple_disk", }
		i=i+1
	end

	i=0
	while i < nics() do
		nic=get_nic(i)
		nic:timer{ name='nic'..i, type="simple_nic", }
		i=i+1
	end

	x=cpus()
	if x ~= 1 then
		error("This experiment only wants to handle 1 cpu")
	end

	cpu=get_cpu(0)
	cpu:timer{ name='cpu0', type="timer0" }

	mem=Memory{ name="main", latency=150  } 

	l2=Cache{ name="l2cache", size="512kB", line_size=16, latency=20, num_sets=4, next=mem, write_policy="WB", write_allocate="true" }
	t2=TLB{ name="l2tlb", page_size="4kB", entries=512, latency=80, num_sets=4, next=mem, write_policy="WB", write_allocate="true" }

	ic=Cache{ name="icache", size="16kB", line_size=16, latency=0, num_sets=2, next=l2, write_policy="WT", write_allocate="false" }
	dc=Cache{ name="dcache", size="16kB", line_size=16, latency=0, num_sets=2, next=l2, write_policy="WT", write_allocate="false" }
	it=TLB{ name="itlb", page_size="4kB", entries=40, latency=0, num_sets=40, next=t2, write_policy="WT", write_allocate="false" }
	dt=TLB{ name="dtlb", page_size="4kB", entries=40, latency=0, num_sets=40, next=t2, write_policy="WT", write_allocate="false" }

	cpu:instruction_cache(ic)
	cpu:data_cache(dc)
	cpu:instruction_tlb(it)
	cpu:data_tlb(dt)
end
-- vim:ft=lua
