#!/usr/bin/ruby -w
# (C) Copyright 2009 Hewlett-Packard Development Company, L.P.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

# $Id: consoleX 6977 2009-12-09 16:18:35Z frb $

$: << File.expand_path(File.dirname(__FILE__) + '/../share')

require 'cotson'

begin
	Kernel.select(nil,nil,nil,1) if Kill.rxvt # else Ctrl-Z
	show_display = true
	if ARGV.size > 0 then
		if ARGV.find("-quiet") then
			show_display = false
		end
	end
	
	debug 'preparing console in display'
	if Execute.runs?(DB['screen_pid']) then
		display_strategy=CF[:display]
		case display_strategy
			when "auto"
				vnc_pid,display=VNC.start_vnc
				force_display=true
				debug " starting automatic display #{display}"
			when "none"
				force_display=false
				debug " using default display"
			else
				force_display=true	
				display=display_strategy
				debug " using given display #{display}"
		end

		if force_display then
			display_str=VNC.display_for_ENV(display)
			prev_display=ENV['DISPLAY']
			ENV['DISPLAY']=display_str
		end

		debug " executing terminal in background"
		debug "   #{CF[:xterm]} -e screen -DDR sessionname"
		ENV['SCREENDIR']=$here.share('screen_dir')
        title="\'#{CF[:runid]} - node #{CF[:NODE]}\'"
		a=Execute.run_background("#{CF[:xterm]} -T #{title} -e screen -DDR sessionname")
		if force_display then
			DB['rxvt_vnc_pid']=vnc_pid if vnc_pid
			DB['rxvt_display']=display
			DB['rxvt_display_str']=display_str
			DB['rxvt_display_http']=VNC.display_for_http(display)
		end
		DB['rxvt_pid']=a[:pid]

		if show_display && vnc_pid then
			debug " opening display viewer in background"
			ENV['DISPLAY']=prev_display
			d=VNC.display_for_vncviewer(DB['rxvt_display'])
			debug "   #{CF[:vncviewer]} #{d}"
			Execute.run_background("#{CF[:vncviewer]} #{d}",'/dev/null')
		end
	else
		puts "no existing session"
	end
rescue Exception => e
	finish e
end
