#!/usr/bin/perl
##
## (C) Copyright 2010 Hewlett-Packard Development Company, L.P.
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
## OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
## ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
## OTHER DEALINGS IN THE SOFTWARE.
##
## $Id$

use DBI;
use strict;

$SIG{INT} = sub { die("caught ctrl-c, goodbye\n"); };

my $host=$ARGV[0] or usage($0); shift;
my $EXPID=$ARGV[0] or usage($0); shift;
my $outfile=$ARGV[0] or usage($0); shift;
my $VERBOSE = 0;
my $INDENT = 0;
my $HC=1;
my $HL2=1;
my $RUN=0;
my $BUS=".bus";

my %STATS;
my %PARAMS;

my %MCPAT = (
    'system' => {
        number_of_L1Directories => 0,
        number_of_L2Directories => 0,
		number_of_NoCs => 1,
        homogeneous_L1Directorys => 1,
        homogeneous_L2Directorys => 1,
        homogeneous_L3s => 1,
        homogeneous_ccs => 1,
        homogeneous_NoCs => 1,
        core_tech_node => 22,
        temperature => 380, 
        interconnect_projection_type => 0,
        device_type => 0,
        longer_channel_device => 1,
        machine_bits => 64,
        virtual_address_width => 64,
        physical_address_width => 52,
        virtual_memory_page_size => 4096,
    },

	## example of a high-performance x86 core
    'x86a' => { 
        x86 => 1,
        opt_local => 0,
        instruction_length => 32,
        opcode_width => 16,
        micro_opcode_width => 8,
        machine_type => 0,
        number_hardware_threads => 2,
        number_instruction_fetch_ports => 1,
        pipelines_per_core => 1,1,
        pipeline_depth => 31,31,
        MUL_per_core => 1,
        FPU_per_core => 2,
        instruction_buffer_size => 32,
        decoded_stream_buffer_size => 16,
        instruction_window_scheme => 0,
        instruction_window_size => 64,
        fp_instruction_window_size => 64,
        number_of_BPT => 2,
        number_of_BTB => 2,
        RAS_size => 64,
        archi_Regs_IRF_size => 16,
        archi_Regs_FRF_size => 32,
        phy_Regs_IRF_size => 256,
        phy_Regs_FRF_size => 256,
        ROB_size => 80,
    },
    'x86a.stats' => {
		IFU_duty_cycle => 1,
		LSU_duty_cycle => 0.5,
		MemManU_I_duty_cycle => 1,
		MemManU_D_duty_cycle => 0.5,
		ALU_duty_cycle => 1,
		MUL_duty_cycle => 0.3,
		FPU_duty_cycle => 0.3,
		ALU_cdb_duty_cycle => 1,
		MUL_cdb_duty_cycle => 0.3,
		FPU_cdb_duty_cycle => 0.3,
	},

	## example of a low power x86 core
    'x86b' => { 
        x86 => 1,
        opt_local => 0,
        instruction_length => 32,
        opcode_width => 16,
        micro_opcode_width => 8,
        machine_type => 0,
        number_hardware_threads => 1,
        number_instruction_fetch_ports => 1,
        pipelines_per_core => 1,1,
        pipeline_depth => 15,15,
        MUL_per_core => 1,
        FPU_per_core => 1,
        instruction_buffer_size => 16,
        decoded_stream_buffer_size => 8,
        instruction_window_scheme => 0,
        instruction_window_size => 16,
        fp_instruction_window_size => 16,
        number_of_BPT => 1,
        number_of_BTB => 1,
        RAS_size => 8,
        archi_Regs_IRF_size => 16,
        archi_Regs_FRF_size => 16,
        phy_Regs_IRF_size => 64,
        phy_Regs_FRF_size => 64,
        ROB_size => 40,
    },
    'x86b.stats' => {
		IFU_duty_cycle => 1,
		LSU_duty_cycle => 0.5,
		MemManU_I_duty_cycle => 1,
		MemManU_D_duty_cycle => 0.25,
		ALU_duty_cycle => 1,
		MUL_duty_cycle => 0.2,
		FPU_duty_cycle => 0.1,
		ALU_cdb_duty_cycle => 1,
		MUL_cdb_duty_cycle => 0.2,
		FPU_cdb_duty_cycle => 0.1,
	},

	## System devices defaults
	'mc' => {
        mc_clock => 400,
        peak_transfer_rate => 6400,
        llc_line_length => 64,
        number_mcs => 0,
        memory_channels_per_mc => 1,
        number_ranks => 2,
        req_window_size_per_channel => 32,
        IO_buffer_size_per_channel => 32,
        databus_width => 128,
        addressbus_width => 51,
    },
	'mainmem' => {
        mem_tech_node => 32,
        device_clock => 200,
        peak_transfer_rate => 6400,
        internal_prefetch_of_DRAM_chip => 4,
        capacity_per_channel => 4096,
        number_ranks => 2,
        num_banks_of_DRAM_chip => 8,
        Block_width_of_DRAM_chip => 64,
        output_width_of_DRAM_chip => 8,
        page_size_of_DRAM_chip => 8,
        burstlength_of_DRAM_chip => 8,
	},
	'noc' => {
        type => 0,
        horizontal_nodes => 1,
        vertical_nodes => 1,
        has_global_link => 0,
        link_throughput => 1,
        input_ports => 1,
        output_ports => 1,
        flit_bits => 256,
        chip_coverage => 1,
        link_routing_over_percentage => 0.5,
	},
	'directory' => {
        Directory_type => 0,
        Dir_config => "4096,2,0,1,100,100,8",
        buffer_sizes => "8,8,8,8",
        ports => "1,1,1",
        device_type => 0,
	},
	'niu' => {
        type => 0,
        clockrate => 350,
        number_units => 0,
	},
	'pcie' => {
        type => 0,
        withPHY => 1,
        clockrate => 350,
        number_units => 1,
        num_channels => 8,
	},
	'flashc' => {
        number_flashcs => 0,
        type => 1,
        withPHY => 1,
        peak_transfer_rate => 200,
	},
);

my $CPUMODEL="x86a";
my $tmin = -1;
my $tmax = -1;
while ($#ARGV >= 0) {
    my $arg = $ARGV[0];
    if    ($arg eq "-v")  { $VERBOSE++; }
    elsif ($arg eq "-c")   { shift; set_cpumodel($ARGV[0]); }
    elsif ($arg eq "-e")   { $HC=0; }
    elsif ($arg eq "-el2") { $HL2=0; }
    elsif ($arg eq "-r")   { $RUN=1; }
    elsif ($arg eq "-t")   { shift; ($tmin,$tmax) = split(/:/,$ARGV[0]); }
    else { usage($0); }
    shift;
}

my $DBH;
if ($host =~ s/file://) {
    ## sqlite
    print "Using SQLite connector\n";
    $DBH = DBI->connect("dbi:SQLite:dbname=$host;");
    $DBH->func('regexp',2,sub{my($r,$s)=@_;return $s=~/$r/;},'create_function'); 
}
else {
    print "Using PostgreSQL connector\n";
    my $username="cotson";
    my $dbname="cotson";
    $DBH = DBI->connect("dbi:Pg:dbname=$dbname;host=$host","$username");
}

my $expdesc = get_description();
load_metrics($tmin,$tmax);
load_params();

open FH,">$outfile";

my $cpus = count_metric('cpu%.instcount');
my $disks = count_metric('disk%.bytes_read');
my $nics = count_metric('nic%.bytes_read');

my $l2s = count_param('l2cache%.size');
my $l3s = count_param('l3cache%.size');
my $dcaches = count_param('dcache%.size');
my $l2priv = ($l2s == $dcaches && $l2s > 1) ? 1 : 0;
my $clev = $l2s > 0 ? ($l3s > 0 ? 3 : 2) : 1;

print FH "<?xml version=\"1.0\" ?>\n";
print FH "<!-- experiment $expdesc , cpumodel $CPUMODEL -->\n";
begin_component("root","root");
begin_component("system","system");

param("homogeneous_cores",$HC);
param("homogeneous_L2s",$HL2);
param("number_of_cores",$cpus);

param("number_cache_levels",$clev);
param("number_of_L2s",$l2s);
param("Private_L2",$l2priv);
param("number_of_L3s",$l3s);

print("CPU $cpus, DISK $disks, NIC $nics, CLEVELS $clev, L2PRIV $l2priv\n");

mcpat_defaults('system');

# Frequency
my $freq = $STATS{"cycles_per_usec"};
param("target_core_clockrate",$freq);
$STATS{'core_clockrate'}=$freq;
my $nanos = $STATS{"nanos"};

my $sample_rate = 0;
if ($HC) {
    my $cycles = $STATS{"cpu0.cycles"};
    my $idle =  $STATS{"cpu0.idlecount"};
    # my $halt = $STATS{"cpu0.haltcount"};
    xstat("total_cycles",$cycles);
    xstat("idle_cycles",$idle);
    xstat("busy_cycles" ,$cycles-$idle);
    $sample_rate = process_cpu(0,$l2priv==1 and $HL2==0);
}
else {
    my $cycles = $STATS{"cycles"};
    xstat("total_cycles",$cycles);
    for (my $i=0; $i< ($HC ? 1 : $cpus); ++$i) {
        $sample_rate += process_cpu($i,$l2priv==1 and $HL2==0); 
    }
    $sample_rate = $sample_rate / $cpus;  ## average sample rate
}

process_directory("system.L1Directory0","L1Directory0",$sample_rate);
process_directory("system.L2Directory0","L2Directory0",$sample_rate);
if ($HL2==1 or $l2priv==0) { ## Shared L2 (system level)
    process_cache(
        "system.L20","L20","L2",
        "l2cache","cpu0.timer.dcache.l2cache",
        $sample_rate);
    # process_tlb("system.T20","T20","l2tlb","$cpu.timer.dcache.l2tlb",$sample_rate);
}
if ($l3s > 0) {
    process_cache("system.L30","L30","L3",
	    "l3cache",
		"cpu0.timer.dcache.l2cache.l3cache",
		$sample_rate);
}
else {
    process_cache("system.L30","L30","L3","l3cache",0,$sample_rate);
}
process_noc("system.Noc0","noc0",$sample_rate);
process_mainmem("system.mem","mem",$sample_rate);
process_memctrl("system.mc","mc",$sample_rate);

my $dbytes = 0;
$MCPAT{'flashc'}{'number_flashcs'}=$disks;
for (my $i=0; $i<$disks; ++$i) {
    $dbytes += $STATS{"disk$i.timer.bytes_read"}+$STATS{"disk$i.timer.bytes_written"};
}
my $nbytes = 0;
$MCPAT{'niu'}{'number_units'}=$nics;
for (my $i=0; $i<$nics; ++$i) { 
    $nbytes += $STATS{"nic$i.timer.bytes_read"}+$STATS{"nic$i.timer.bytes_written"};
}

process_niu("system.niu","niu",$nbytes,$nanos);
process_pcie("system.pcie","pcie",$dbytes+$nbytes,$nanos);
process_flashc("system.flashc","flashc",$dbytes,$nanos);

end_component("system");
end_component("root");
close FH;

$DBH->disconnect();

if ($RUN) {
    print "Running mcpat\n";
    my $cmd = "mcpat -infile $outfile -print_level 5 -opt_for_clk 0 > $outfile.txt";
	print "$cmd\n";
    system "$cmd";
}

exit(0);

#######################################################################################

sub process_cpu
{
    my $ix = int(shift);
    my $l2 = shift;
    my $cpu = "cpu$ix";
    my $mcpat_id="system.core$ix";
    begin_component($mcpat_id,"core$ix");
    param("clock_rate", $STATS{'core_clockrate'});

    ### PARAMS
	mcpat_defaults($CPUMODEL);

	my $ew=$PARAMS{"$cpu.execution_width"};
    my $xwidth=$ew ? $ew : 1;
    param("fetch_width",$xwidth);
    param("decode_width",$xwidth);
    param("issue_width",$xwidth);
    param("peak_issue_width",$xwidth);
    param("commit_width",$xwidth);
    param("fp_issue_width",$xwidth);
    param("ALU_per_core",$xwidth);

    ### STATS
    my $cycles = $STATS{"$cpu.cycles"};
    my $idle =  $STATS{"$cpu.idlecount"};
    my $insts =  $STATS{"$cpu.instcount"};
    # my $halt = $STATS{"$cpu.haltcount"};

    my $t_cycles = $STATS{"$cpu.timer.cycles"};
    my $t_insts = $STATS{"$cpu.timer.instructions"};
    my $t_ipc = $t_cycles > 0 ? $t_insts/$t_cycles : 0;
    my $sample_rate = $t_insts > 0 ? $insts/$t_insts : 0;

    my $t_ld = int($STATS{"$cpu.timer.dcache.read"} * $sample_rate);
    my $t_st = int($STATS{"$cpu.timer.dcache.write"} * $sample_rate);
    my $t_ctl = int($STATS{"$cpu.timer.twolev.lookup"} * $sample_rate);
    my $t_misp = int($STATS{"$cpu.timer.twolev.misses"} * $sample_rate);
    my $t_fp = 0;
	my $t_regrd = 0; 
	my $t_regwr = 0 ;
	my $ttype = $STATS{"$cpu.timer.type"};
	if ($ttype == "timer_dep") {
        $t_fp = int($STATS{"$cpu.timer.fp_instructions"} * $sample_rate);
        $t_regrd = int($STATS{"$cpu.timer.reg_reads"} * $sample_rate);
        $t_regwr = int($STATS{"$cpu.timer.reg_writes"} * $sample_rate);
	}
	elsif ($ttype == "timer0" or $ttype == "timer1") {
        $t_fp = 0; ## not provided
        $t_regrd = $t_insts * 2 * $sample_rate; ## rough approx (2R/inst)
        $t_regwr = $t_insts * $sample_rate;     ## rough approx (1W/inst)
	}
	else {
        die "ERROR: '$ttype' CPU timer not supported\n";
	}
    my $t_int = $insts - $t_fp - $t_ctl;

    print "CPU   ( $cpu ) insts $insts timer $t_insts samplerate $sample_rate\n" 
        if $VERBOSE > 0;

    if ($HC == 0) {
        xstat("total_cycles",$cycles);
        xstat("idle_cycles",$idle);
        xstat("busy_cycles",$cycles-$idle);
    }
    xstat("total_instructions",$insts);
    xstat("int_instructions",$t_int);
    xstat("fp_instructions",$t_fp);
    xstat("branch_instructions",$t_ctl);
    xstat("branch_mispredictions",$t_misp);
    xstat("load_instructions",$t_ld);
    xstat("store_instructions",$t_ld);
    xstat("committed_instructions",$insts);
    xstat("committed_int_instructions", $t_int);
    xstat("committed_fp_instructions", $t_fp);
    xstat("pipeline_duty_cycle",$t_ipc/$xwidth);
    xstat("ROB_reads",$insts);
    xstat("ROB_writes",$insts);
    xstat("rename_reads",$t_regrd);
    xstat("rename_writes",$t_regwr);
    xstat("fp_rename_reads",$t_fp);
    xstat("fp_rename_writes",$t_fp);
    xstat("inst_window_reads",$insts);
    xstat("inst_window_writes",$insts);
    xstat("inst_window_wakeup_accesses",$t_regwr);
    xstat("fp_inst_window_reads",$t_fp);
    xstat("fp_inst_window_writes",$t_fp);
    xstat("fp_inst_window_wakeup_accesses",$t_fp);
    xstat("int_regfile_reads",$t_regrd);
    xstat("int_regfile_writes",$t_regwr);
    xstat("float_regfile_reads",$t_fp);
    xstat("float_regfile_writes",$t_fp);
    xstat("ialu_accesses",$t_int);
    xstat("fpu_accesses",$t_fp);
    xstat("cdb_alu_accesses",$t_regwr*2);
    xstat("cdb_fpu_accesses",$t_fp*2);

    # xstat("mul_accesses",0);
    #xstat("cdb_mul_accesses",0);
    #xstat("function_calls",0);
    #xstat("context_switches",0);

    ## Fixed magic numbers
	mcpat_stat_defaults("$CPUMODEL.stats");

    process_predictor("$mcpat_id.predictor","PBT","$cpu.twolev","$cpu.timer.twolev",$sample_rate);
    process_tlb("$mcpat_id.itlb","itlb","itlb$ix","$cpu.timer.itlb",$sample_rate);
    process_cache("$mcpat_id.icache","icache","icache",
                  "icache$ix","$cpu.timer.icache", $sample_rate);
    process_tlb("$mcpat_id.dtlb","dtlb","dtlb$ix","$cpu.timer.dtlb",$sample_rate);
    process_cache("$mcpat_id.dcache","dcache","dcache",
                  "dcache$ix","$cpu.timer.dcache", $sample_rate);
    process_btb("$mcpat_id.BTB","BTB","$cpu.twolev","$cpu.timer.twolev",$sample_rate);
    if ($l2) { ## Private L2 (core level)
        process_cache("$mcpat_id.L20","L20","L2",
                      "l2cache","$cpu.timer.dcache.l2cache",$sample_rate);
        # process_tlb("$mcpat_id.T20","T20","l2tlb","$cpu.timer.dcache.l2tlb",$sample_rate);
    }
    end_component($cpu);
    return $sample_rate;
}

sub process_predictor
{
    my $mcpat_id = shift;
    my $mcpat_name = shift;
    my $ppath = shift; # cotson param  path
    my $mpath = shift; # cotson metric path
    my $sample_rate = shift;

    my $l2size=bytes($PARAMS{"$ppath.l2_size"});
    my $hlength=bytes($PARAMS{"$ppath.hlength"});
    my $l1size=bytes($PARAMS{"$ppath.l1_size"});

    begin_component($mcpat_id,$mcpat_name);
    param("local_predictor_size","$hlength,$l1size");
    param("local_predictor_entries",$l2size);
    param("global_predictor_entries",$l2size);
    param("global_predictor_bits",$l1size);
    param("chooser_predictor_entries",$l2size);
    param("chooser_predictor_bits","$l1size");
    param("load_predictor","$hlength,$l1size,$l2size");
    param("global_predictor","$l2size,$l1size");
    param("predictor_chooser","$l2size,$l1size");
    end_component($mcpat_name);
}

sub process_btb
{
    my $mcpat_id = shift;
    my $mcpat_name = shift;
    my $ppath = shift; # cotson param  path
    my $mpath = shift; # cotson metric path
    my $sample_rate = shift;

    begin_component($mcpat_id,$mcpat_name);
    param("BTB_config","5120,4,2,1, 1,3");
    my $lookup = int($STATS{"$mpath.lookup"} * $sample_rate);
    xstat("read_accesses",$lookup);
    xstat("write_accesses",0);
    end_component($mcpat_name);
}

sub process_tlb
{
    my $mcpat_id = shift;
    my $mcpat_name = shift;
    my $ppath = shift; # cotson param  path
    my $mpath = shift; # cotson metric path
    my $sample_rate = shift;

    my $entries=$PARAMS{"$ppath.entries"};

    my $t_acc = int($STATS{"$mpath.read"} * $sample_rate);
    my $t_miss = int($STATS{"$mpath.read_miss"} * $sample_rate);
    print "TLB   ( $mcpat_id $ppath $mpath ) $t_acc $t_miss\n" if $VERBOSE>0;

    begin_component($mcpat_id,$mcpat_name);
    param("number_entries",$entries);
    xstat("total_accesses",$t_acc);
    xstat("total_misses",$t_miss);
    xstat("conflicts","0");
    end_component($mcpat_name);
}

sub process_cache
{
    my $mcpat_id = shift;
    my $mcpat_name = shift;
    my $mcpat_type = shift;
    my $ppath = shift; # cotson param  path
    my $mpath = shift; # cotson metric path
    my $sample_rate = shift;

    my $linesize=$PARAMS{"$ppath.line_size"};
    my $num_sets=$PARAMS{"$ppath.num_sets"};
    my $size=bytes($PARAMS{"$ppath.size"});
    my $latency=$PARAMS{"$ppath.latency"};
    my $wthru=$PARAMS{"$ppath.WT"};
    my $walloc=$PARAMS{"$ppath.write_allocate"};

    my $policy = (($mcpat_type eq "icache") or ($wthru == 1 and $walloc == 0)) ? 1 : 0;
    my $wbufs = ($policy==1) ? 0 : ($mcpat_type eq "L2") ? 16 : 1;

    my $t_rd = $mpath ? int($STATS{"$mpath.read"} * $sample_rate) : 0;
    my $t_wr = $mpath ? int($STATS{"$mpath.write"} * $sample_rate) : 0;
    my $t_rdmiss = $mpath ? int($STATS{"$mpath.read_miss"} * $sample_rate) : 0;
    my $t_wrmiss = $mpath ? int($STATS{"$mpath.write_miss"} * $sample_rate) : 0;
    
    print "CACHE ( $mcpat_id $ppath $mpath ) $t_rd $t_rdmiss $t_wr $t_wrmiss\n" if $mpath and $VERBOSE>0;

    begin_component($mcpat_id,$mcpat_name);

    param($mcpat_type."_config",
         "$size,$linesize,$num_sets,1,".  # capacity,block_width,associativity,bank
         "1,$latency,$linesize,".         # throughput,latency,output_width
         $policy);                        # cache policy

    param("buffer_sizes","16, 16, 16, $wbufs");
    if ($mcpat_type eq "L2") {
        param("clockrate", $STATS{'core_clockrate'});
        param("ports","1,1,1");
        param("device_type",0);
    }
    xstat("read_accesses",$t_rd);
    xstat("read_misses",$t_rdmiss);
    xstat("write_accesses",$t_wr);
    xstat("write_misses",$t_wrmiss);
    xstat("conflicts",0);
    end_component($mcpat_name);
}

sub process_directory
{
    my $mcpat_id = shift;
    my $mcpat_name = shift;
    my $sample_rate = shift;
    begin_component($mcpat_id,$mcpat_name);
    mcpat_defaults('directory');
    xstat("read_accesses",0);
    xstat("write_accesses",0);
    xstat("read_misses",0);
    xstat("write_misses",0);
    xstat("conflicts",0);
    end_component($mcpat_name);
}

sub process_noc
{
    my $mcpat_id = shift;
    my $mcpat_name = shift;
    my $sample_rate = shift;
    begin_component($mcpat_id,$mcpat_name);
    mcpat_defaults('noc');
    param("clockrate", $STATS{'core_clockrate'});
    xstat("total_accesses",0);
    xstat("duty_cycle","1");
    end_component($mcpat_name);
}

sub process_mainmem
{
    my $mcpat_id = shift;
    my $mcpat_name = shift;
    my $sample_rate = shift;
    begin_component($mcpat_id,$mcpat_name);
    mcpat_defaults('mainmem');
    my $mpath = "cpu0.timer.dcache.l2cache$BUS.main.access";
    my $t_acc= $STATS{$mpath};
    xstat("memory_accesses", int($t_acc * $sample_rate));
    print "MMEM  ( $mcpat_id $mpath ) $t_acc\n" if $VERBOSE>0;
    end_component($mcpat_name);
}

sub process_memctrl
{
    my $mcpat_id = shift;
    my $mcpat_name = shift;
    my $sample_rate = shift;
    begin_component($mcpat_id,$mcpat_name);
    mcpat_defaults('mc');
    my $t_acc= $STATS{"cpu0.timer.dcache.l2cache$BUS.main.access"};
    my $t_rd= $STATS{"cpu0.timer.dcache.l2cache$BUS.main.read"};
    my $t_wr= $STATS{"cpu0.timer.dcache.l2cache$BUS.main.write"};
    xstat("memory_accesses",int($t_acc*$sample_rate));
    xstat("memory_reads",int($t_rd*$sample_rate));
    xstat("memory_writes",int($t_wr*$sample_rate));
    print "MC    ( $mcpat_id ) $t_acc $t_rd $t_wr\n" if $VERBOSE>0;
    end_component($mcpat_name);
}

sub process_niu
{
    my $mcpat_id = shift;
    my $mcpat_name = shift;
    my $bytes = shift;
    my $nanos = shift;
	my $maxbytes = $nanos * 10.0/8.0; ## 10Gbit/s NIC
    begin_component($mcpat_id,$mcpat_name);
    mcpat_defaults('niu');
    xstat("duty_cycle","1.0");
    xstat("total_load_perc",$bytes/$maxbytes);
    print "NIU   ( $mcpat_id ) $bytes $maxbytes \n" if $VERBOSE>0;
    end_component($mcpat_name);
}

sub process_pcie
{
    my $mcpat_id = shift;
    my $mcpat_name = shift;
    my $bytes = shift;
    my $nanos = shift;
	my $maxbytes = $nanos * 
	    $MCPAT{'pcie'}{'clockrate'}/1000.0 *  ## rate is in Mbytes/s
	    $MCPAT{'pcie'}{'num_channels'};
    begin_component($mcpat_id,$mcpat_name);
    mcpat_defaults('pcie');
    xstat("duty_cycle","1.0");
    xstat("total_load_perc",$bytes/$maxbytes);
    print "PCIE  ( $mcpat_id ) $bytes $maxbytes \n" if $VERBOSE>0;
    end_component($mcpat_name);
}

sub process_flashc
{
    my $mcpat_id = shift;
    my $mcpat_name = shift;
    my $bytes = shift;
    my $nanos = shift;
	my $maxbytes = $nanos * 
	    $MCPAT{'flashc'}{'peak_transfer_rate'}/1000.0;  ## rate is in Mbytes/s
    begin_component($mcpat_id,$mcpat_name);
    mcpat_defaults('flashc');
    xstat("duty_cycle","1.0");
    xstat("total_load_perc",$bytes/$maxbytes);
    print "DISK  ( $mcpat_id ) $bytes $maxbytes \n" if $VERBOSE>0;
    end_component($mcpat_name);
}

sub indent { for(my $i=0; $i < $INDENT; ++$i) { print FH '  '; }}

sub begin_component
{
   my $id=shift;
   my $name=shift;
   indent();
   print FH "<component id=\"$id\" name=\"$name\">\n";
   $INDENT++;
}

sub end_component
{
   my $name=shift;
   $INDENT--;
   indent();
   print FH "</component> <!-- $name -->\n";
}

sub param
{
   my $name=shift;
   my $val=shift;
   indent();
   print FH "<param name=\"$name\" value=\"$val\"/>\n";
}


sub xstat
{
   my $name=shift;
   my $val=shift;
   indent();
   print FH "<stat name=\"$name\" value=\"$val\"/>\n";
}

sub usage 
{
    die "
Usage: $0 database experiment_id outfile [options]
    Options:
          [-e]                      individual core stats (heterogeneous cores)
          [-el2]                    individual l2 stats (heterogeneous L2)
          [-c model]                use 'model' cpumodel (default: x86)
          [-r]                      also run mcpat
          [-t tmin:tmax]            use stats for time between tmin and tmax (in msec)
          [-v]                      increase verbosity
	The database specification can refer to an sqlite file (format: 'file:xxx.db')
	or a postgres server (format: 'hostname')
	\n";
}

sub get_description 
{
    my $h = query("SELECT description from experiments where experiment_id='$EXPID';");
    my $v = $h->execute();
    my $desc = ($h->fetchrow_array())[0] if ($v==0);
    $h->finish();
    return $desc;
}

sub count_param
{
    my $name = shift;
    my $h = query("SELECT COUNT(name) FROM parameters where name like '$name';");
    my $v = $h->execute();
    my $n = (($h->fetchrow_array())[0]) if ($v==0);
    $h->finish();
    return $n;
}

sub count_metric
{
    my $name = shift;
    my $h = query("SELECT COUNT(name) FROM metric_names where name like '$name';");
    my $v = $h->execute();
    my $n = (($h->fetchrow_array())[0]) if ($v==0);
    $h->finish();
    return $n;
}

sub query 
{ 
    my $q = shift; 
    print "QUERY: $q\n" if $VERBOSE>1; 
    return $DBH->prepare($q); 
}

sub load_params
{
    print "load experiment parameters....\n";
    my $h = query("SELECT name,value FROM parameters;");
    my $v = $h->execute();
    while (my @row=$h->fetchrow_array()) { 
        my $k = $row[0];
        my $v = $row[1];
        $k =~ s/(cpu[0-9]+)/cpu0/ if ($HC);
        $PARAMS{$k}=$v;
    }
    if ($VERBOSE>1) {
        foreach my $t (sort keys %PARAMS) {
            print "PARAM: $t = $PARAMS{$t}\n";
        }
    }
}

sub load_metrics
{
	my $t0 = shift;
	my $t1 = shift;

    print "load experiment metrics....\n";

    ## Search final heartbeat (sort descending, pick first)
    my $h = query("
        SELECT heartbeat_id FROM heartbeats 
        WHERE experiment_id='$EXPID' AND machine_id>0
        ORDER BY heartbeat_id DESC LIMIT 1;");
    $h->execute();
    my $finalhb = (($h->fetchrow_array())[0]);

	my $hb0 = $finalhb;
	my $hb1 = $finalhb;
	if ($t0 >=0 and $t1 >= 0) {
		## Find hartbeats in time range
	    $t0 = $t0 * 1e6;
	    $t1 = $t1 * 1e6;
        my $h = query("
            SELECT heartbeat_id FROM heartbeats 
            WHERE experiment_id='$EXPID' AND machine_id>0 AND nanos >= $t0
			AND heartbeat_id < $finalhb
            ORDER BY heartbeat_id LIMIT 1;");
        $h->execute();
        $hb0 = (($h->fetchrow_array())[0]);
        my $h = query("
            SELECT heartbeat_id FROM heartbeats 
            WHERE experiment_id='$EXPID' AND machine_id>0 AND nanos <= $t1 
			AND heartbeat_id < $finalhb
            ORDER BY heartbeat_id DESC LIMIT 1;");
        $h->execute();
        $hb1 = (($h->fetchrow_array())[0]);
	}
	my $hbsel =    $hb0 == $hb1
	            ? "metrics.heartbeat_id = $hb0"
	            : "metrics.heartbeat_id >= $hb0 AND metrics.heartbeat_id <= $hb1";
    $h = query("
        SELECT name,value FROM metric_names,metrics
        WHERE $hbsel AND metric_names.metric_id=metrics.metric_id;");
    $h->execute();
    while (my @row=$h->fetchrow_array()) {
        my $k = $row[0];
        my $v = $row[1];
		if ($k =~ /\.timer\./) { $STATS{$k} += $v; }
		else { $STATS{$k} = $v; }
    }
	if ($HC) {
	    ## Fold all stats into cpu0
        foreach my $k (sort keys %STATS) {
            my $v = $STATS{$k};
            my $k0 = $k;
            if ($k0 =~ s/(cpu[1-9][0-9]*\.)/cpu0./) {
			    delete $STATS{$k};
			    $STATS{$k0} += $v; 
			}
		}
	}
    if ($VERBOSE>1) {
        foreach my $t (sort keys %STATS) {
            print "METRIC: $t = $STATS{$t}\n";
        }
    }
    $h->finish();

	## Do we have a bus?
	$BUS="" if $STATS{"cpu0.timer.dcache.l2cache.main.access"};
}

sub bytes
{
    my $s = shift;
    return $s * 1024*1024*1024 if ($s=~s/GB//);
    return $s * 1024*1024 if ($s=~s/MB//);
    return $s * 1024 if ($s=~s/kB//);
    return $s;
}

sub set_cpumodel 
{
    my $m = shift;
    $CPUMODEL=$m;
    if (!$MCPAT{$m}) {
        print "Valid CPU models are: ";
        foreach $m (keys %MCPAT) { print "$m " if exists $MCPAT{$m}{x86}; }
        print "\n";
        die "ERROR: '$m' CPU model not supported\n";
    }
}

sub mcpat_defaults 
{
    my $m = shift;
	for my $p (keys %{$MCPAT{$m}}) { param($p,$MCPAT{$m}{$p}); }
}

sub mcpat_stat_defaults 
{
    my $m = shift;
	for my $p (keys %{$MCPAT{$m}}) { xstat($p,$MCPAT{$m}{$p}); }
}

